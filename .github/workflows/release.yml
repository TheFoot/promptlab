name: Create Release

# Set default permissions for all jobs in the workflow
permissions:
  contents: write
  packages: write
  
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (major/minor/patch for regular releases, pre* for prereleases)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
          - custom
      prerelease_identifier:
        description: 'Prerelease identifier (only needed for pre* version types)'
        required: false
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - rc
          - custom
      custom_identifier:
        description: 'Custom prerelease identifier (only needed if prerelease_identifier is set to custom)'
        required: false
        type: string
      custom_version:
        description: 'Custom version (only needed if version_type is set to custom)'
        required: false
        type: string

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      changes: ${{ steps.generate-notes.outputs.changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Update Version In All Package Files
        id: bump-version
        run: |
          npm install -g semver
          chmod +x .github/actions-scripts/update-versions.js
          node .github/actions-scripts/update-versions.js \
            "${{ github.event.inputs.version_type }}" \
            "${{ github.event.inputs.prerelease_identifier }}" \
            "${{ github.event.inputs.custom_identifier }}" \
            "${{ github.event.inputs.custom_version }}" | tee version_output.txt
          
          # Extract the new version from the output
          NEW_VERSION=$(grep "^Version change:" version_output.txt | sed 's/.*â†’ \(.*\)/\1/')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version extracted: $NEW_VERSION"
          
      - name: Generate Release Notes
        id: generate-notes
        run: |
          # Make script executable
          chmod +x .github/actions-scripts/generate-release-notes.sh
          
          # Run script and capture output
          NOTES=$(.github/actions-scripts/generate-release-notes.sh)
          
          # Save notes to file and output for GitHub Actions
          echo "$NOTES" > release_notes.md
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Commit Version Changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ./package.json ./frontend/package.json ./backend/package.json
          
          # Ensure we have access to the new version
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          echo "Using version: $NEW_VERSION for commit"
          git commit -m "chore: bump version to v$NEW_VERSION"
          
      - name: Create Tag
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          echo "Creating tag v$NEW_VERSION"
          git tag v$NEW_VERSION
          
      - name: Push Changes and Tags
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          name: Release v${{ needs.prepare-release.outputs.new_version }}
          body: ${{ needs.prepare-release.outputs.changes }}
          draft: false
          prerelease: ${{ contains(github.event.inputs.version_type, 'pre') || contains(needs.prepare-release.outputs.new_version, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.new_version }}
          
      # Make sure dependencies are in sync before building
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Update package-lock.json
        run: |
          echo "Updating package-lock.json to include all dependencies"
          npm install --package-lock-only
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package-lock.json
          git commit -m "chore: update package-lock.json for Docker build" || echo "No changes to commit"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/promptlab:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/promptlab:v${{ needs.prepare-release.outputs.new_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max